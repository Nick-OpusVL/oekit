#! /usr/bin/env python

"""Dump an Odoo database record to XML
"""

import sys
import argparse
from oekit.oe_client_env import OEClientEnv

import logging

try:
    from lxml import etree
    logging.debug("running with lxml.etree")
except ImportError:
    try:
        # Python 2.5
        import xml.etree.cElementTree as etree
        logging.debug("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # Python 2.5
            import xml.etree.ElementTree as etree
            logging.debug("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree
                logging.debug("running with cElementTree")
            except ImportError:
                # normal ElementTree install
                import elementtree.ElementTree as etree
                logging.debug("running with ElementTree")


def main(options):
    """Main program."""
    oe = OEClientEnv().get_proxy()
    xml_generator = XMLGenerator(oe, options.model)
    rec = xml_generator.get_record(options.numeric_id, options.fields)
    if not rec:
        logging.error('Record %d not found in model %s' % (options.numeric_id, options.model))
        sys.exit(4)
    xml = xml_generator.generate_xml(rec, options.fields)
    sys.stdout.write(etree.tostring(xml, pretty_print=True))



class XMLGenerator(object):
    def __init__(self, oe, model_name):
        self._oe = oe
        self._model_name = model_name
        self._model = oe.get_model(model_name)
        self._fields = self._model.execute('fields_get')

    def get_record(self, numeric_id, fields):
        return self._model.read(numeric_id, fields)

    def generate_xml(self, rec, fields):
        root, data = make_root_data()
        record = etree.SubElement(data, "record", id="TODO", model=self._model_name)
        record.extend(
            self.field_element(rec, field) for field in fields
        )
        return root

    def field_element(self, rec, field):
        value = rec[field]
        return make_field_element(self._fields[field]['type'], field, value)


def make_field_element(field_type, field, value):
    """Return etree.Element representing this field's value.
    """
    if value == False or field_type == 'boolean':
        return etree.Element("field", name=field, eval=repr(value))
    else:
        elem = etree.Element("field", name=field)
        elem.text = value or ''
        return elem
        

        
def make_root_data():
    root = etree.Element("openerp")
    data = etree.SubElement(root, "data")
    return root, data

def get_options():
    """Get options for the script."""
    parser = argparse.ArgumentParser(
        description="Dump an Odoo database record to XML",
    )
    # parser.add_argument() calls here
    parser.add_argument('model')
    parser.add_argument('numeric_id', type=int)
    parser.add_argument('fields', nargs='+')
    options = parser.parse_args()
    # extra processing of options here
    return options

if __name__ == "__main__":
    main(get_options())
